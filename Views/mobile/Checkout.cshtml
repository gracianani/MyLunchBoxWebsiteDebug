@model MyLunchBox.Models.Order
@{
    ViewBag.Title = "Checkout";
    Layout = "~/Views/Shared/_MobileMemberMaster.cshtml";
    var validationSummary = "";
    if (ViewData["Errors"] != null)
    {
        validationSummary = ViewData["Errors"].ToString();
    }
    var shoppingCart = (MyLunchBox.Models.ShoppingCart)ViewData["cart"]; 
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>


<div data-role="content">
    
    @using (Html.BeginForm())
    {
        if (!string.IsNullOrEmpty(validationSummary) )
        {
            @Html.ValidationSummary(true)
            <ul id="warningMsg" class="alert alert-block alert-error">
                 @validationSummary
            </ul>
        }
        <div class="lightBox">
            <input type="hidden" id="canUseRewardPoints" value="@shoppingCart.CanUserRewardPoint" />
            <input type="hidden" id="needDeliveryInfo" value="@shoppingCart.NeedDeliveryInfo" />
            @{ 
                <table class="table" >
                <thead>
                    <tr>
                    <th data-priority="2">Detail</th>
                    <th data-priority="3">Quantity</th>
                    <th data-priority="4">Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cartItem in shoppingCart.ShoppingCartItems)
                    {
                        <tr>
                        <td>@cartItem.Description</td>
                        <td>@cartItem.Quantity</td>
                        <td class="cart-totalPrice">$ @cartItem.LineItemCost</td>
                        </tr>
                    }
                    </tbody>
                </table>
                
            }
        </div>
         <div class="lightBox">
                <div class="rewardPointLine">
                  You've <em>@Html.Display("totalRewardPoints")</em> award points<br />
                  @Html.TextBoxFor(m => m.rewardPoints, new Dictionary<string, object> { { "type", "hidden" }, { "class", "input-mini" }, { "data-max", ViewBag.totalRewardPoints } }) 
                  <label data-theme="b"><input  data-theme="b" id="isUseRewardPoints" type="checkbox" name="isUseRewardPoints" /> Make payment with your points</label>
                  <small class="gray">( Order Amount:<span id="orderAmountPoints">0</span>  | Remain: <span id="remainPoints">0</span> )</small>
                   
                  
                  <span class="cart-subtotalPrice"> </span>
                  </div>
                  <div class="notEnoughRewardPointLine">
                  You've <em>@Html.Display("totalRewardPoints")</em> award points, not enough to pay the bill. 
                  </div>
        </div>
        <div data-role="collapsible" class="deliveryInfo" id="deliveryInfo"  data-content-theme="d">
        	<legend><h3>Delivery Infomation</h3>
                @{ var deliveryLocation = (MyLunchBox.Models.University_Delivery)ViewData["deliveryLocation"];
                <table>
                    <tr><th >Name</th><td id="tdReceiverName">@Html.DisplayFor(m => m.ReceiverFirstName) @Html.DisplayFor(m => m.ReceiverLastName)</td></tr>
                    <tr><th >Phone</th><td id="tdReceiverPhoneNumber">@Html.DisplayFor(m => m.ReceiverPhoneNumber)</td></tr>
                    <tr><th>DeliveryLocation</th><td>@deliveryLocation.Location.BusinessName</td></tr>
                    <tr><th>DeliveryTime</th><td>@DateTime.Parse(ViewData["deliveryTime"].ToString()).ToString("MMM dd, yyyy hh:mm tt")</td></tr>
                </table>
                }
            </legend>
            <div>
            <div data-role="fieldcontain">
            <label for="shippingFirstName" class="ui-input-text">First Name</label>
            @Html.TextBoxFor(m => m.ReceiverFirstName)@Html.ValidationMessageFor(m => m.ReceiverFirstName)
            </div>
            <div  data-role="fieldcontain">
            <label for="shippingLastName" class="ui-input-text">Last Name</label>
            @Html.TextBoxFor(m => m.ReceiverLastName)@Html.ValidationMessageFor(m => m.ReceiverLastName)
            </div>
            <div  data-role="fieldcontain">
            <label for="shippingPhone"  class="ui-input-text">Phone</label>
           @Html.TextBoxFor(m => m.ReceiverPhoneNumber)
            </div>
            </div>
        </div>
        
       
        <div id="paymentInfo">
            @Html.HiddenFor(m => m.PaymentType)
            <label for="ddl-paymentType" ><h3>Please Select Payment Type</h3></label>
            <select id="ddl-paymentType" name="ddl-paymentType">
                <option value="creditCard"> CreditCard </option>
                <option value="cash"> Cash </option>
            </select>
			<div id="pnl-paymetType">

			  <div id="creditCard"  data-inset="true">
                    <fieldset>
                        <label for="creditCardType"  class="select">Card Type</label>
		                <select name="creditCardType">
		                    <option value="VISA" selected="selected">Visa</option>
		                    <option value="MASTERCARD">MasterCard</option>
		                    <option value="DISCOVER">Discover</option>
		                    <option value="AMEX">Amex</option>
		                </select>
                    </fieldset>
                    <fieldset >
                        <label >Card Number</label>
                        @Html.TextBoxFor(m => m.cardNumber)@Html.ValidationMessageFor(m => m.cardNumber)
                    </fieldset>
                    <fieldset data-role="controlgroup" data-type="horizontal">
		            <legend class="control-label">Card Expiration Date</legend>
		            <select name="cardExpMonth">
		                <option value="1">01</option>
		                <option value="2">02</option>
		                <option value="3">03</option>
		                <option value="4">04</option>
		                <option value="5">05</option>
		                <option value="6">06</option>
		                <option value="7">07</option>
		                <option value="8">08</option>
		                <option value="9">09</option>
		                <option value="10">10</option>
		                <option value="11">11</option>
		                <option value="12">12</option>
		            </select>
		            <select name="cardExpYear">
		                <option value="2013">2013</option>
		                <option value="2014">2014</option>
		                <option value="2015">2015</option>
		                <option value="2016">2016</option>
		                <option value="2017">2017</option>
		                <option value="2018">2018</option>
		            </select>
		            </fieldset>
		            <fieldset>
		            <label class="control-label">CSV</label> (<a href="#popupCSV" id="whatscsv">What's CSV? </a>)
		             <div class="controls"> @Html.TextBoxFor(m => m.CSV)@Html.ValidationMessageFor(m => m.CSV)</div>
		            </fieldset>		
		            		  
			  </div>
			  <div id="cash" style="display:none">
                <ul>
                    <li>Cash on delivery (COD) payment</li>
                    <li> You have chosen the cash on delivery method</li>
                    <li> The total amount of your order is </li>
                </ul>
				  <ul>
				  <li>现金支付说明：</li>
				  <li>请您在取餐时使用现金支付</li>
				  <li>无法获得我们的Reward Points</li>
				  <li>在指定时间内无人取餐，将会影响您的帐户信用</li>
				  </ul>
			  </div>
			</div>

            <div data-role="collapsible" id="billingInfo" data-content-theme="d">
            <legend><h3>Billing Info</h3>
                <table>
                    <tr><td> @Html.DisplayFor(m => m.billingFirstName) @Html.DisplayFor(m => m.billingLastName) </td></tr>
                    <tr><td> @Html.DisplayFor(m => m.billingAddress1) @Html.DisplayFor(m => m.billingAddress2), @Html.DisplayFor(m => m.billingCity), @Html.DisplayFor(m => m.billingState), @Html.DisplayFor(m => m.billingZipCode) </td></tr>
                </table>
            </legend>
            <div class="control-group">
            <label>First Name</label>
            <div class="controls">
            @Html.TextBoxFor(m => m.billingFirstName)
            @Html.ValidationMessageFor(m => m.billingFirstName)
            </div>
            </div>
            <div class="control-group">
            <label >Last Name</label>
            <div class="controls">@Html.TextBoxFor(m => m.billingLastName)@Html.ValidationMessageFor(m => m.billingLastName)</div>
            </div>
            <div class="control-group">
            <label >Address Line1</label>
            <div class="controls">@Html.TextBoxFor(m => m.billingAddress1)@Html.ValidationMessageFor(m => m.billingAddress1)</div>
            </div>
            <div class="control-group">
            <label>Address Line2</label>
            <div class="controls">@Html.TextBoxFor(m => m.billingAddress2)@Html.ValidationMessageFor(m => m.billingAddress2)</div>
            </div>
            <div class="control-group">
            <label>City</label>
            <div class="controls">@Html.TextBoxFor(m => m.billingCity)@Html.ValidationMessageFor(m => m.billingCity)</div>
            </div>
            <div class="control-group">
            <label >State</label>
            <div class="controls">
            @Html.DropDownListFor(m => m.billingState, @MyLunchBox.Models.StatesRepository.Instance.StatesListWithSelectedItem(@Model.billingState))
            </div>
            </div>
            <div class="control-group">
            <label>ZipCode</label>
            <div class="controls">@Html.TextBoxFor(m => m.billingZipCode)@Html.ValidationMessageFor(m => m.billingZipCode)</div>
            </div>
            </div> 
        </div>
        
        
        
        <ul data-role="listview" data-inset="true">
            <li class="lightButton">
                <table id="checkoutSummary" >
                <thead>
                    <tr></tr>
                </thead>
                <tbody>
                    <tr><th >Item Subtotal</th><td class="cart-totalPrice">+</td><td class="cart-totalPrice"> $@shoppingCart.ItemSubtotal</td></tr>
                    <tr><th >Delivery Fee</th><td class="cart-totalPrice">+</td><td class="cart-totalPrice"> $@shoppingCart.Shipping</td></tr>
                    <tr><th >Gross</th><td class="cart-totalPrice">+</td><td class="cart-totalPrice"> $@shoppingCart.Gross @Html.Hidden("gross")</td></tr>
                    <tr><th> Total Saving</th><td class="cart-savingPrice">-</td><td class="cart-savingPrice">$<span id="Savings">@Html.DisplayTextFor(m => m.Savings)</span></td></tr>
                    <tr><th >Final</th><td></td><td class="cart-totalPrice"> $<span id="FinalAmount">@Html.DisplayTextFor(m => m.FinalAmount)</span></td></tr>
                </tbody> 
                </table>
            </li>
        </ul>
        
        <div>
        <input type="submit" data-theme="b" data-ajax="false" value="Submit" />
        </div>
    }

</div>
<div data-role="panel" id="popupCSV">
	<p><strong>Visa - MasterCard -  Discover</strong></p>
    <p>On Visa, MasterCard and Discover cards, the CVS Code is a 3 digit number located on the back of the card such as shown below:</p>
    <img src='../../Content/Images/EchoCvCardBig.gif' />
    <p><strong>American Express</strong></p>
    <p>On American Express cards, the CVS Code is a 4 digit number located on the front of the card such as shown below:</p>
    <img src='../../Content/Images/EchoCvAmexCardBig.gif' />
    <a href="#dishSummary" data-role="button" data-rel="close" data-theme="b" data-icon="delete">Close panel</a>
</div>



<script type="text/javascript">
    $(document).bind('pageinit', function () {

        $('#isUseRewardPoints').change(setRewardPointsNum);
        $('#rewardPoints').change(calculateActualAmount);
        $("#cash").hide();
        $("#ddl-paymentType").on("change", function (event, ui) {
			console.log('here');
            if ($(this).val() == 'creditCard') {
                $("#creditCard").show(function () {
                    $('#billingInfo').show(
                        function () {
                            $("#cash").hide();
                        }
                    );
                })
                $("#PaymentType").val('1');
            } else {
                $("#creditCard").hide(function () {
                    $("#cash").show(function () {
                        $('#billingInfo').hide();
                    });
                });
                $("#PaymentType").val('2');
            }
        });

        $.validator.addMethod("billinginforequired", function (value) {
            if ($("#PaymentType").val() == '1') {
                return (value != null && value != '' && typeof (value) != 'undefined');
            }
            return true;
        });
        $.validator.unobtrusive.adapters.addBool("billinginforequired");
        $.validator.addMethod("deliveryinforequired", function (value) {
            console.log(value);
            if ($('#needDeliveryInfo').val() == 'True') {
                return (value != null && value != '' && typeof (value) != 'undefined');
            }
            return true;
        });
        $.validator.unobtrusive.adapters.addBool("deliveryinforequired");
        initActualAmount();
        if ($('#needDeliveryInfo').val() == 'True') {
            $('.deliveryInfo').show();
        }
        else {
            $('.deliveryInfo').hide();
        }

        $(':submit').tap(function () {
			if ( !$(this).attr('disabled') ) {
            $(this).attr('disabled', 'true');
            if ( $('form').validate().form()) {				
                $('form').submit();
            } else {
                $(this).removeAttr('disabled');
            }
			}
        });

        $("#deliveryInfo").bind("collapse",
             function (event, ui) {
                 $("#tdReceiverName").html($("#ReceiverFirstName").val() + " " + $("#ReceiverLastName").val())
                 $("#tdReceiverPhoneNumber").html($("#ReceiverPhoneNumber").val())
             }
        );

        $("#billingInfo").bind("collapse",
             function (event, ui) {
                 $("#tdUniversityName").html($("#UniversityId option:selected").text())
                 $("#tdUniversityDeliveryName").html($("#UniversityDeliveryId option:selected").text())
             }
        );

        //checkUniversity('UCLA', 'PUWL');



    });
    function getExchangeRate() {
        return 100;
    }
    function initActualAmount() {
        var isRewardPointsEnough = $("#isRewardPointEnough").val() == "True";
        if ($("#canUseRewardPoints").val() == "True") {
            initRewardPointsCheckbox(true, isRewardPointsEnough);
        } else {
            $("#PaymentType").val('1');
            initRewardPointsCheckbox(false, isRewardPointsEnough);
            $('#paymentTab').find('li:has(a[href=#cash])').hide();
            
        }

    }
    function initRewardPointsCheckbox(adminSetting, isRewardPointsEnough) {
        var exchangeRate = getExchangeRate();
        var rewardPoints = parseInt($('#rewardPoints').attr("data-max"));
        var orderAmount = Math.round(exchangeRate * parseFloat($('#gross').val()));
        if (adminSetting && (rewardPoints > orderAmount)) {
            $('#isUseRewardPoints').attr('checked', true).checkboxradio("refresh"); ;
            $(".rewardPointLine").show();
            $('.notEnoughRewardPointLine').hide();
        } else {
            $('#isUseRewardPoints').removeAttr('checked').checkboxradio("refresh"); ;
            $(".rewardPointLine").hide();
            $('#rewardPoints').val(0);
            if (adminSetting && !isRewardPointsEnough) {
                $('.notEnoughRewardPointLine').show();
            }
            else {
                $('.notEnoughRewardPointLine').hide();
            }
        }
        setRewardPointsNum();
    }

    function setRewardPointsNum(e) {

        var exchangeRate = getExchangeRate();
        var rewardPoints = parseInt($('#rewardPoints').attr("data-max"));

        if ($('#isUseRewardPoints').is(':checked')) {

            var orderAmount = Math.round(exchangeRate * parseFloat($('#gross').val()));
            var usedPoints = Math.min(orderAmount, rewardPoints);

            $('#rewardPoints').val(usedPoints);
            $('#orderAmountPoints').html(usedPoints);
            $('#remainPoints').html('' + (rewardPoints - usedPoints));
        } else {
            $('#rewardPoints').val(0);
            $('#orderAmountPoints').html('0');
            $('#remainPoints').html(rewardPoints);
        }
        calculateActualAmount();
    }
    function calculateActualAmount() {
        var exchangeRate = getExchangeRate();
        var rewardPoints = parseInt($('#rewardPoints').val());
        var gross = parseFloat($('#gross').val());
        var actualAmount = gross - rewardPoints / exchangeRate;
        $('#Savings').html((rewardPoints / exchangeRate).toFixed(2));
        if (actualAmount < 0.009) {
            $('#billingInfo, #paymentInfo').hide();
            $("#PaymentType").val('3');
        } else {
            $('#paymentInfo').show();
            if (!$('#cash').hasClass('active')) {
                $('#billingInfo').show();
                $("#PaymentType").val('1');
            }
            else {
                $("#PaymentType").val('2');
            }
        }
        showActualAmount(actualAmount);
    }
    function showActualAmount(amount) {
        amount = (Math.round(amount * 100) / 100).toFixed(2);
        $('#FinalAmount').html(amount);
    }
    function checkUniversity(orderUniversity, profileUniversity) {

        if (!(orderUniversity == profileUniversity)) {

            if (confirm("Your order location(" + orderUniversity + ") is different with your profile location(" + profileUniversity + ")\nAre you sure to check out?")) {
                $('#orderUniversity').html('<em style="font-size:18px">' + $('#orderUniversity').html() + '</em>');
                console.log($('#orderUniversity'));
            } else {
                window.location.href = "/Mobile/Cart/";
            }
        }
    }
</script>